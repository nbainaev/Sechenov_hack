import os

from ourmodel import FinalModel

import streamlit as st
from streamlit_echarts import st_echarts
from PIL import Image

def update_and_save_img(img_file_buffer) -> None:
    if "img.jpg" in os.listdir():
        os.remove("img.jpg")
    
    try:
        img = Image.open(img_file_buffer)
        img.save("img.jpg")

    except AttributeError as error:
        return error

def draw_pie(data):
    options = {
        "tooltip": {"trigger": "item"},
        "legend": {"top": "5%", "left": "center"},
        "series": [
            {
                "name": "pie",
                "type": "pie",
                "radius": ["40%", "70%"],
                "avoidLabelOverlap": False,
                "itemStyle": {
                    "borderRadius": 10,
                    "borderColor": "#fff",
                    "borderWidth": 2,
                },
                "label": {"show": False, "position": "center"},
                "emphasis": {
                    "label": {"show": True, "fontSize": "40", "fontWeight": "bold"}
                },
                "labelLine": {"show": False},
                "data": [],
            }
        ],
    }

    options["series"][0]["data"] += data

    st_echarts(
        options=options, height="250px",
    )

st.title("Skin cancer analyzer", anchor=False)
st.subheader('Developed by "Gosling team"')
st.divider()

col_1, col_2 = st.columns(2)

with col_1:
    st.subheader(":blue[–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏]")
    st.write("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è –º–µ–ª–∞–Ω–æ–º—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ–∂–Ω—ã—Ö –ø–æ–∫—Ä–æ–≤–æ–≤.")

with col_2:
    st.subheader(":blue[–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç?]")
    st.write("–í –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –≤—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç 'Print', —á—Ç–æ–±—ã —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–æ—á–µ—Ç–∞–Ω–∏–µ–º 'ctrl + s', —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.")

st.divider()
img_file_buffer = st.file_uploader(":blue[–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .jpg]", type='jpg')
# img_file_buffer = st.camera_input(":blue[–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —Å–Ω—è—Ç—å —Ñ–æ—Ç–æ]", label_visibility='visible', disabled=False)

col_3, col_4 = st.columns(2)
model = FinalModel(6)

if img_file_buffer is not None:
    try:
        with st.spinner('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è‚Ä¶'):
            update_and_save_img(img_file_buffer)

        with col_3:
            prediction = model.calibrated_predict("img.jpg")
            st.subheader(":blue[–ó–∞–∫–ª—é—á–µ–Ω–∏–µ]")
            st.write(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ —Ñ–æ—Ç–æ: {prediction['binary_probs'][0] * 100:.1f}%. \n–î–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Å {prediction['multiclass_preds'][0]}")

        with col_4:
            st.subheader(":blue[–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è]")
            st.image(img_file_buffer)

    except TypeError as e:
        st.warning("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!", icon="üö®")
